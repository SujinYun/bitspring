/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.42
 * Generated at: 2019-08-31 02:46:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.calendar;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import bit.com.a.model.MemberDto;
import bit.com.a.model.CalendarDto;
import java.util.Calendar;
import java.util.List;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


// 자바용 nvl함수
public boolean nvl(String msg){
	return msg == null || msg.trim().equals("")?true:false;
}

// 날짜를 클릭하면, 그날의 일정이 모두 보이게 하는 callist.jsp로 이동하는 함수
public String callist(int year, int month, int day){
	String str = "";
	
	str += String.format("<a href='%s?year=%d&month=%d&day=%d'>", 
								"callist.do", year, month, day);
	
	str += String.format("%2d", day);	// %2d : 숫자 표현할 때 2칸으로 잡아라
	str += "</a>";

	/*
	<a href='callist.jsp?year=2019&menth=07&day=31'>31</a>
	*/
	return str;
}

// 일정을 기입하기 위해서 pen이미지를 클릭하면, calwrite.jsp로 이동시키는 함수
public String showPen(int year, int month, int day, String id){
	String str = "";
	
	String image = "<img src='image/pen.gif'>";
	
	str = String.format("<a href='%s?year=%d&month=%d&day=%d&id=%s'>%s</a>", 
									"calwrite.do", year, month, day, id,image);
	
	/*
		<a href='calwrite.jsp?year=2019&month=07&day=31'>
			<img src='image/pen.gif'>
		</a>
	*/
	return str;
}

// 1 -> 01		2019731 -> 20190731
public String two(String msg){
	return msg.trim().length() < 2?"0"+msg.trim():msg.trim();
}

// 각 날짜별로 테이블을 생성하는 함수
public String makeTable(int year, int month, int day, List<CalendarDto> list){
	String str = "";
	// 20190731
	String dates = (year + "") + two(month + "") + two(day + "");
	
	str += "<table>";
	str += "<col width='98'>";
	
	for(CalendarDto dto : list){
		if(dto.getRdate().substring(0, 8).equals(dates)){
			str += "<tr bgcolor='#FFFF8F'>";
			str += "<td>";
			
			str += "<a href='caldetail.do?seq=" + dto.getSeq() + "'>";
			
			str += "<font style='font-size:6px;color:#050099'>";
			
			str += dot3(dto.getTitle());
			System.out.println("dto.getTitle()" + dto.getTitle());
			
			str += "</font>";
			
			str += "</a>";
			
			str += "</td>";		
			str += "</tr>";
		}
	}
	
	str += "</table>";
	
	return str;
}

// 제목이 너무 길면 제목+...으로 처리하는 함수 	예) 일요일에 산업기사 시험이 있음 -> 일요일에 산업기....
public String dot3(String msg){
	String str = "";
	if(msg.length() >= 9){
		str = msg.substring(0,9);	// 0에서 9까지
		str += "...";
	}else{
		str = msg.trim();
	}
	return str;
}



  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("bit.com.a.model.MemberDto");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("bit.com.a.model.CalendarDto");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

List<CalendarDto> callist = (List<CalendarDto>)request.getAttribute("callist");
System.out.println("callist.size() : " + callist.size());
MemberDto mem = (MemberDto)request.getAttribute("mem");

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>calendar.jsp</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("body{\r\n");
      out.write("\tfont-family: Times New Roman;\r\n");
      out.write("}\r\n");
      out.write("table{\r\n");
      out.write("\tborder-collapse: collapse;\r\n");
      out.write("}\r\n");
      out.write(".day7{\r\n");
      out.write("\tcolor: #747474;\r\n");
      out.write("}\r\n");
      out.write(".main{\r\n");
      out.write("\tfont-size: 40px;\r\n");
      out.write("}\r\n");
      out.write("a:link{\r\n");
      out.write("\tcolor: gray;\r\n");
      out.write("}\r\n");
      out.write("a:visited{\r\n");
      out.write("\tcolor: gray;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("a:hover {\r\n");
      out.write("\tcolor: #F29661;\r\n");
      out.write("}\r\n");
      out.write("a:active {\r\n");
      out.write("\tcolor: #FFFFFF;\r\n");
      out.write("}\r\n");
      out.write(".ymd{\r\n");
      out.write("\tposition: relative;\r\n");
      out.write("    top: 30px;\r\n");
      out.write("    right: -8px;\r\n");
      out.write("}\r\n");
      out.write(".arrow{\r\n");
      out.write("\tposition: relative;\r\n");
      out.write("\ttop: 26px;\r\n");
      out.write("}\r\n");
      out.write("#_rArrow2, #_rArrow1{\r\n");
      out.write("\tposition: relative;\r\n");
      out.write("\tleft: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");

Calendar cal = Calendar.getInstance();
cal.set(Calendar.DATE, 1);

String syear = request.getParameter("year");
String smonth = request.getParameter("month");
System.out.println("syear:" + syear + " smonth:" + smonth);

int year = cal.get(Calendar.YEAR);
if(nvl(syear) == false){	// 파라미터가 넘어온 경우
	// syear가 비어있지 않다면
	year = Integer.parseInt(syear);
}

int month = cal.get(Calendar.MONTH) + 1;	//0부터 시작하기 때문에 +1을 해준다
if(nvl(smonth) == false){
	month = Integer.parseInt(smonth);
}

if(month < 1){
	month = 12;
	year--;
}

if(month > 12){
	month = 1;
	year++;
}

cal.set(year, month-1, 1);		// 연, 월, 일 셋팅완료

// 요일
int dayOfWeek = cal.get(Calendar.DAY_OF_WEEK);

//	<<		year--
String pp = String.format("<a class='arrow' href='%s?year=%d&month=%d'>" 
						+ "<img src='image/arrow_left2.png'></a>",
						"calendar.do", year-1, month);

//	<		month--
String p = String.format("<a class='arrow' href='%s?year=%d&month=%d'>" 
						+ "<img src='image/arrow_left1.png'></a>",
						"calendar.do", year, month-1);

// 	>		month++
String n = String.format("<a id='_rArrow1' class='arrow' href='%s?year=%d&month=%d'>" 
						+ "<img src='image/arrow_right1.png'></a>",
						"calendar.do", year, month+1);

//	>>		year++
String nn = String.format("<a id='_rArrow2' class='arrow' href='%s?year=%d&month=%d'>" 
						+ "<img src='image/arrow_right2.png'></a>",
						"calendar.do", year+1, month);

/* MemberDto user = (MemberDto)session.getAttribute("login");

iCalendar dao = CalendarDao.getInstance();
List<CalendarDto> list = dao.getCalendarList(user.getId(), year + two(month + "")); */

      out.write("\r\n");
      out.write("\r\n");
      out.write("<div align=\"center\">\r\n");
      out.write("\r\n");
      out.write("<table border=\"1\">\r\n");
      out.write("<col width=\"100\"><col width=\"100\"><col width=\"100\"><col width=\"100\">\r\n");
      out.write("<col width=\"100\"><col width=\"100\"><col width=\"100\">\r\n");
      out.write("\r\n");
      out.write("<tr height=\"100\">\r\n");
      out.write("\t<td colspan=\"7\" align=\"center\">\r\n");
      out.write("\t\t");
      out.print(pp );
      out.write("&nbsp;");
      out.print(p );
      out.write("\r\n");
      out.write("\t\t<font color=\"gray\" style=\"font-size: 28px\" class=\"ymd\">\r\n");
      out.write("\t\t\t");
      out.print(String.format("%d년&nbsp;&nbsp;%d월", year, month) );
      out.write("\t\t\r\n");
      out.write("\t\t</font>\r\n");
      out.write("\t\t");
      out.print(n );
      out.write("&nbsp;");
      out.print(nn );
      out.write("\r\n");
      out.write("\t</td>\r\n");
      out.write("</tr>\r\n");
      out.write("\r\n");
      out.write("<tr height=\"10\" class=\"day7\">\r\n");
      out.write("\t<td align=\"center\" style=\"color: red;\">일</td>\r\n");
      out.write("\t<td align=\"center\">월</td>\r\n");
      out.write("\t<td align=\"center\">화</td>\r\n");
      out.write("\t<td align=\"center\">수</td>\r\n");
      out.write("\t<td align=\"center\">목</td>\r\n");
      out.write("\t<td align=\"center\">금</td>\r\n");
      out.write("\t<td align=\"center\">토</td>\r\n");
      out.write("</tr>\r\n");
      out.write("\r\n");
      out.write("<tr height=\"100\" align=\"left\" valign=\"top\">\t<!-- 좌측 상단부터 -->\r\n");

// 위쪽 빈칸
for(int i = 1; i<dayOfWeek; i++){
	
      out.write("\r\n");
      out.write("\t<td>&nbsp;</td>\r\n");
      out.write("\t");

}

      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

// lastDay : 마지막 날짜
int lastDay = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
for(int i =1; i<=lastDay; i++){
	
      out.write("\r\n");
      out.write("\t<td>");
      out.print(callist(year, month, i) );
      out.write("&nbsp;");
      out.print(showPen(year, month, i, mem.getId()) );
      out.write("\r\n");
      out.write("\t\t");
      out.print(makeTable(year, month, i, callist) );
      out.write("\r\n");
      out.write("\t\t ");
      out.write("\r\n");
      out.write("\t</td>\r\n");
      out.write("\t");

	if((i + dayOfWeek -1) % 7 == 0 && i != lastDay){
		
      out.write("\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr height=\"100\" align=\"left\" valign=\"top\">\r\n");
      out.write("\t\t");

	}
}


      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');

for(int i=0; i<(7 - (dayOfWeek + lastDay -1)% 7 )% 7; i++){
	
      out.write("\r\n");
      out.write("\t<td>&nbsp;</td>\r\n");
      out.write("\t");

}


      out.write("\r\n");
      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
